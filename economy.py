import discord
from discord.ext import commands
from discord.ui import View, Button
import sqlite3
import random
import time
import re
from datetime import datetime, timezone
from collections import defaultdict
from typing import Optional


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DAILY_COOLDOWN = 24 * 60 * 60  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
EMOJI_REGEX = re.compile(r'<a?:(\w+):\d+>|[\U00010000-\U0010ffff]')
PASSIVE_INCOME_RATE = 6  # –º–æ–Ω–µ—Ç –≤ —á–∞—Å –∑–∞ –æ–Ω–ª–∞–π–Ω

def setup(bot, db):
    @bot.event
    async def on_voice_state_update(member, before, after):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        user_id = str(member.id)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
        if before.channel is None and after.channel is not None:
            db.set_voice_join_time(user_id, int(time.time()))
            db.set_join_timestamp(user_id, int(time.time()))
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        elif before.channel is not None and after.channel is None:
            join_time = db.get_voice_join_time(user_id)
            if join_time:
                time_spent = int(time.time()) - join_time
                db.update_voice_time(user_id, time_spent)
                db.set_voice_join_time(user_id, None)

    @bot.event
    async def on_message(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∫–∏"""
        if message.author.bot:
            return
        
        user_id = str(message.author.id)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ
        if not db.get_user(user_id):
            db.create_user(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        db.update_message_count(user_id)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏
        for match in EMOJI_REGEX.finditer(message.content):
            emoji_str = match.group()
            db.track_emoji(user_id, emoji_str)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–ª–æ–≤ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã)
        if not message.content.startswith(bot.command_prefix):
            words = message.content.lower().split()
            for word in words:
                word = ''.join(c for c in word if c.isalnum())
                if len(word) >= 4:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                    db.track_word(user_id, word)
                    
        if not db.get_user(user_id):
            db.create_user(user_id)
            db.add_first_message_time(user_id)

    def calculate_passive_income(user_id: str) -> int:
        stats = db.get_user_stats(user_id)
        if not stats or not stats.get('time_first_message'):
            return 0  # No first message = no income

        credited_hours = stats.get('credited_hours', 0)
        time_first_message = int(stats['time_first_message'])

        # Calculate total hours since the first message
        total_hours = int((time.time() - time_first_message) // 3600)
        new_hours = total_hours - credited_hours

        if new_hours <= 0:
            return 0

        reward = new_hours * PASSIVE_INCOME_RATE
        try:
            with db.conn:
                db.update_balance(user_id, reward)
                db.conn.execute(
                    "UPDATE user_stats SET credited_hours = ? WHERE user_id = ?",
                    (credited_hours + new_hours, user_id)
                )
            return reward
        except sqlite3.Error as e:
            logger.error(f"Passive income error: {e}")
            return 0


    @bot.command(name="fissdaily")
    async def daily(ctx):
        user_id = str(ctx.author.id)
        
        # Ensure user exists
        if not db.get_user(user_id):
            db.create_user(user_id)
        
        # Get fresh data after potential creation
        user_data = db.get_user(user_id)
        stats = db.get_user_stats(user_id)
        
        if not user_data or not stats:
            await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        now = int(time.time())
        last_daily = stats.get("last_daily", 0)
        elapsed = now - last_daily

        if elapsed < DAILY_COOLDOWN:
            remaining = DAILY_COOLDOWN - elapsed
            hours, rem = divmod(remaining, 3600)
            minutes, _ = divmod(rem, 60)
            await ctx.send(f"‚è≥ –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É —á–µ—Ä–µ–∑ {hours}—á {minutes}–º")
            return

        streak = stats.get("daily_streak", 0)
        if elapsed < 2 * DAILY_COOLDOWN:
            streak = (streak % 7) + 1
        else:
            streak = 1

        base_rewards = [45, 50, 55, 60, 65, 70, 75]
        base_reward = base_rewards[min(streak - 1, 6)]
        total_reward = base_reward + user_data['level'] + streak

        try:
            with db.conn:
                db.update_balance(user_id, total_reward)
                db.conn.execute("""
                    UPDATE user_stats 
                    SET last_daily = ?, daily_streak = ? 
                    WHERE user_id = ?
                """, (now, streak, user_id))
            
            await ctx.send(
                f"üéÅ –î–µ–Ω—å {streak}/7: –í—ã –ø–æ–ª—É—á–∏–ª–∏ {base_reward} –º–æ–Ω–µ—Ç + {user_data['level']} –∑–∞ —É—Ä–æ–≤–µ–Ω—å + {streak} –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É = **{total_reward} –º–æ–Ω–µ—Ç**\n"
                f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data['balance'] + total_reward}"
            )
        except Exception as e:
            await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã")
            logger.error(f"Daily command error: {e}")

    @bot.command(name="balance")
    async def balance(ctx, member: Optional[discord.Member] = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        target = member or ctx.author
        user_id = str(target.id)
        user = db.get_user(user_id)
        
        if not user:
            db.create_user(user_id)
            user = db.get_user(user_id)
        
        passive_income = calculate_passive_income(user_id)
        total_balance = user['balance'] + passive_income
        
        await ctx.send(f"üí∞ {target.display_name} –∏–º–µ–µ—Ç {total_balance} –º–æ–Ω–µ—Ç.")

    @bot.command(name="leaderboard")
    async def leaderboard(ctx, top_n: int = 10):
        """–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É"""
        if not 1 <= top_n <= 25:
            return await ctx.send("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 25")

        try:
            cursor = db.conn.cursor()
            cursor.execute("""
                SELECT user_id, balance FROM users 
                ORDER BY balance DESC LIMIT ?
            """, (top_n,))
            
            embed = discord.Embed(title="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", color=0xFFD700)
            
            leaderboard = []
            for idx, (user_id, balance) in enumerate(cursor.fetchall(), 1):
                try:
                    user = await bot.fetch_user(int(user_id))
                    leaderboard.append(f"{idx}. {user.display_name} ‚Äî {balance} –º–æ–Ω–µ—Ç")
                except:
                    leaderboard.append(f"{idx}. [–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π] ‚Äî {balance} –º–æ–Ω–µ—Ç")
            
            embed.add_field(
                name="üí∞ –ë–æ–≥–∞—Ç–µ–π—à–∏–µ –∏–≥—Ä–æ–∫–∏",
                value="\n".join(leaderboard) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                inline=False
            )
            
            await ctx.send(embed=embed)
        except Exception as e:
            await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

    class RoleShopView(View):
        """View –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ —Ä–æ–ª–µ–π"""
        def __init__(self, ctx, db):
            super().__init__(timeout=180)
            self.ctx = ctx
            self.db = db
            self.load_buttons()
        
        def load_buttons(self):
            """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–æ–ª–µ–π"""
            cursor = self.db.conn.cursor()
            cursor.execute("SELECT role_name, price FROM role_shop")
            
            for role_name, price in cursor.fetchall():
                button = Button(
                    label=f"–ö—É–ø–∏—Ç—å {role_name} ({price} –º–æ–Ω–µ—Ç)",
                    style=discord.ButtonStyle.primary,
                    custom_id=f"role_{role_name}_{int(time.time())}"
                )
                button.callback = self.create_callback(role_name, price)
                self.add_item(button)
        
        def create_callback(self, role_name: str, price: int):
            """–°–æ–∑–¥–∞–µ—Ç callback –¥–ª—è –∫–Ω–æ–ø–∫–∏"""
            async def callback(interaction: discord.Interaction):
                if interaction.user != self.ctx.author:
                    return await interaction.response.send_message(
                        "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –º–∞–≥–∞–∑–∏–Ω!", ephemeral=True)
                
                user_id = str(interaction.user.id)
                user = self.db.get_user(user_id)
                role = discord.utils.get(interaction.guild.roles, name=role_name)
                
                if not role:
                    return await interaction.response.send_message(
                        f"‚ùå –†–æ–ª—å {role_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True)
                
                if role in interaction.user.roles:
                    return await interaction.response.send_message(
                        f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å {role_name}!", ephemeral=True)
                
                if user['balance'] < price:
                    return await interaction.response.send_message(
                        f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ {price}", ephemeral=True)
                
                try:
                    self.db.update_balance(user_id, -price)
                    await interaction.user.add_roles(role)
                    await interaction.response.send_message(
                        f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ —Ä–æ–ª—å {role_name} –∑–∞ {price} –º–æ–Ω–µ—Ç!", 
                        ephemeral=True)
                except Exception as e:
                    await interaction.response.send_message(
                        f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)
            
            return callback

    @bot.command(name="roleshop")
    async def roleshop(ctx):
        """–ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π —Å–µ—Ä–≤–µ—Ä–∞"""
        cursor = db.conn.cursor()
        cursor.execute("SELECT role_name, price FROM role_shop")
        roles = cursor.fetchall()
        
        if not roles:
            return await ctx.send("üõí –ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π –ø—É—Å—Ç!")
        
        embed = discord.Embed(title="üéñÔ∏è –ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π", color=0x00FF00)
        description = []
        
        for role_name, price in roles:
            role = discord.utils.get(ctx.guild.roles, name=role_name)
            if role:
                description.append(f"{role.mention} ‚Äî {price} –º–æ–Ω–µ—Ç")
            else:
                description.append(f"`{role_name}` ‚Äî {price} –º–æ–Ω–µ—Ç (—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
        
        embed.description = "\n".join(description)
        await ctx.send(embed=embed, view=RoleShopView(ctx, db))