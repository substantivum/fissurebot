# economy.py
import discord
from discord.ui import View, Button
from database import BotDatabase
from utils import logger, DAILY_COOLDOWN
import random
import time
from datetime import datetime 

def setup(bot, db):
    
    def setup(bot, db):
    
    @bot.event
    async def on_voice_state_update(member, before, after):
        user_id = str(member.id)
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
        if before.channel is None and after.channel is not None:
            db.set_voice_join_time(user_id, int(time.time()))
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        elif before.channel is not None and after.channel is None:
            join_time = db.get_voice_join_time(user_id)
            if join_time:
                time_spent = int(time.time()) - join_time
                db.update_voice_time(user_id, time_spent)
                db.set_voice_join_time(user_id, None)
    
    @bot.event
    async def on_message(message):
        if message.author.bot:
            return
        
        user_id = str(message.author.id)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ
        if not db.get_user(user_id):
            db.create_user(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        stats = db.get_user_stats(user_id)
        if stats:
            try:
                db.conn.execute("""
                    UPDATE user_stats SET messages = messages + 1 WHERE user_id = ?
                """, (user_id,))
                db.conn.commit()
            except sqlite3.Error as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —ç–º–æ–¥–∑–∏ (–≤–∫–ª—é—á–∞—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
        for match in EMOJI_REGEX.finditer(message.content):
            emoji_str = match.group()
            db.track_emoji(user_id, emoji_str)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–ª–æ–≤ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã)
        if not message.content.startswith(bot.command_prefix):
            words = message.content.lower().split()
            for word in words:
                # –£–¥–∞–ª—è–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                word = ''.join(c for c in word if c.isalnum())
                if word:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–æ –Ω–µ –ø—É—Å—Ç–æ–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    db.track_word(user_id, word)
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            exp_gain = random.randint(5, 15)
            try:
                db.conn.execute("""
                    UPDATE users SET experience = experience + ? WHERE user_id = ?
                """, (exp_gain, user_id))
                db.conn.commit()
            except sqlite3.Error as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –æ–ø—ã—Ç–∞: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
            try:
                user = db.get_user(user_id)
                exp_needed = user['level'] * 100
                if user['experience'] >= exp_needed:
                    db.conn.execute("""
                        UPDATE users 
                        SET level = level + 1, experience = experience - ?
                        WHERE user_id = ?
                    """, (exp_needed, user_id))
                    db.conn.commit()
                    await message.channel.send(f"üéâ {message.author.mention} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è {user['level'] + 1}!")
            except sqlite3.Error as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è: {e}")
        
        await bot.process_commands(message)
    
    @bot.command(name="fissdaily")
    async def daily(ctx):
        user_id = str(ctx.author.id)
        user_data = db.get_user(user_id)
        stats = db.get_user_stats(user_id)
        
        if not user_data:
            db.create_user(user_id)
            user_data = db.get_user(user_id)
            stats = db.get_user_stats(user_id)

        # If last_daily is None, this is likely the first time
        last_daily = stats.get("last_daily", 0) or 0

        if time.time() - last_daily < DAILY_COOLDOWN:
            remaining = int(DAILY_COOLDOWN - (time.time() - last_daily))
            hours, remainder = divmod(remaining, 3600)
            minutes, seconds = divmod(remainder, 60)
            await ctx.send(f"‚è≥ –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É —á–µ—Ä–µ–∑ {hours}—á {minutes}–º {seconds}—Å")
            return
        
        amount = random.randint(10, 50)
        streak = stats["daily_streak"] or 0
        if time.time() - last_daily < DAILY_COOLDOWN * 2:
            streak += 1
        else:
            streak = 1
        
        bonus = min(streak * 5, 100)
        total = amount + bonus

        db.update_balance(user_id, total)
        try:
            db.conn.execute("""
                UPDATE user_stats
                SET last_daily = ?, daily_streak = ?
                WHERE user_id = ?
            """, (int(time.time()), streak, user_id))
            db.conn.commit()
        except sqlite3.Error as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        await ctx.send(
            f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {amount} –º–æ–Ω–µ—Ç (—Å–µ—Ä–∏—è: {streak} –¥–Ω–µ–π) + {bonus} –±–æ–Ω—É—Å = **{total} –º–æ–Ω–µ—Ç**!\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance'] + total}"
        )
    
    @bot.command(name="help")
    async def bothelp_command(ctx):
        embed = discord.Embed(
            title="üìö –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞",
            description="–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            color=0x00ffcc
        )

        # Music Commands
        embed.add_field(
            name="üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
            value="""
            `!play <url>` - –ü—Ä–æ–∏–≥—Ä–∞—Ç—å –ø–µ—Å–Ω—é —Å YouTube
            `!queue` - –ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å
            `!skip` - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–µ—Å–Ω—é
            `!clearqueue` - –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
            `!shufflequeue` - –ü–µ—Ä–µ–º–µ—à–∞—Ç—å –æ—á–µ—Ä–µ–¥—å
            `!stop` - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º—É–∑—ã–∫—É
            `!join` - –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å—É
            `!leave` - –ü–æ–∫–∏–Ω—É—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
            `!volume <0.0-2.0>` - –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å
            `!nowplaying` - –¢–µ–∫—É—â–∞—è –ø–µ—Å–Ω—è
            """,
            inline=False
        )

        # Economy Commands
        embed.add_field(
            name="üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞",
            value="""
            `!balance` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
            `!fissdaily` - –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
            `!pay @user amount` - –ü–µ—Ä–µ–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã
            `!leaderboard` - –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
            """,
            inline=False
        )

        # Statistics Commands
        embed.add_field(
            name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            value="""
            `!level` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç
            `!activity` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            `!topactivity` - –¢–æ–ø –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            """,
            inline=False
        )

        # Role Shop Commands
        embed.add_field(
            name="üéñÔ∏è –ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π",
            value="`!roleshop` - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏",
            inline=False
        )

        # Admin Commands
        if ctx.author.guild_permissions.administrator:
            embed.add_field(
                name="üîí –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã",
                value="""
                `!adminpanel` - –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
                `!addrole <name> <price>` - –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å
                `!removerole <name>` - –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å
                `!setprice <name> <price>` - –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É
                `!givecoins @user <amount>` - –í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã
                `!resetuser @user` - –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                `!broadcast <message>` - –û–±—ä—è–≤–ª–µ–Ω–∏–µ
                `!cleardb` - –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É
                `!shutdown` - –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞
                `!clear_downloads` - –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
                """,
                inline=False
            )
        
        embed.set_footer(text=f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ {ctx.author.display_name}", icon_url=ctx.author.avatar.url)
        
        await ctx.send(embed=embed)
    
    @bot.command(name="roleshop")
    async def roleshop(ctx):
        class RoleShopView(View):
            def __init__(self):
                super().__init__(timeout=None)
                self.load_roles()

            def load_roles(self):
                cursor = db.conn.cursor()
                cursor.execute("SELECT role_name, price FROM role_shop")
                self.roles = cursor.fetchall()

            async def interaction_check(self, interaction: discord.Interaction):
                return not interaction.user.bot

            async def create_button_callback(self, role_name: str, price: int):
                async def button_callback(interaction: discord.Interaction):
                    user_id = str(interaction.user.id)
                    guild = interaction.guild
                    role = discord.utils.get(guild.roles, name=role_name)
                    
                    if not role:
                        await interaction.response.send_message(f"‚ùå Role `{role_name}` not found on this server.", ephemeral=True)
                        return
                    
                    if role in interaction.user.roles:
                        await interaction.response.send_message(f"‚ùå You already have the `{role_name}` role.", ephemeral=True)
                        return
                    
                    cursor = db.conn.cursor()
                    cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
                    result = cursor.fetchone()
                    balance = result[0] if result else 0
                    
                    if balance < price:
                        await interaction.response.send_message(f"‚ùå Not enough coins to buy `{role_name}`.", ephemeral=True)
                        return
                    
                    db.update_balance(user_id, -price)
                    await interaction.user.add_roles(role)
                    await interaction.response.send_message(f"‚úÖ Bought `{role_name}` for {price} fissure coins!", ephemeral=True)
                
                return button_callback

        embed = discord.Embed(title="üéñÔ∏è Role Shop", description="Select a role to purchase", color=0x00ff00)
        view = RoleShopView()
        
        for role_name, price in view.roles:
            embed.add_field(name=role_name, value=f"{price} fissure coins", inline=False)
        
        for role_name, price in view.roles:
            button = Button(
                label=f"Buy {role_name}", 
                custom_id=f"buyrole_{role_name.lower()}", 
                style=discord.ButtonStyle.primary
            )
            button.callback = await view.create_button_callback(role_name, price)
            view.add_item(button)
        
        await ctx.send(embed=embed, view=view)

    @bot.command(name="balance")
    async def balance(ctx, member: discord.Member = None):
        target = member or ctx.author
        user_id = str(target.id)
        user = db.get_user(user_id)
        
        if not user:
            db.create_user(user_id)
            user = db.get_user(user_id)
        
        await ctx.send(f"üí∞ {target.display_name} –∏–º–µ–µ—Ç {user['balance']} –º–æ–Ω–µ—Ç")
    
    @bot.command(name="leaderboard")
    async def leaderboard(ctx, top_n: int = 10):
        # Validate top_n input
        if top_n < 1 or top_n > 25:
            await ctx.send("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 25")
            return

        try:
            # Get money leaderboard
            cursor = db.conn.cursor()
            cursor.execute("""
                SELECT user_id, balance 
                FROM users 
                ORDER BY balance DESC 
                LIMIT ?
            """, (top_n,))
            money_top = cursor.fetchall()

            # Get level/exp leaderboard
            cursor.execute("""
                SELECT user_id, level, experience 
                FROM users 
                ORDER BY level DESC, experience DESC 
                LIMIT ?
            """, (top_n,))
            level_top = cursor.fetchall()

            if not money_top and not level_top:
                await ctx.send("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.")
                return

            embed = discord.Embed(title="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", color=0xFFD700)
            
            # Add money leaderboard if data exists
            if money_top:
                money_desc = []
                for idx, (user_id, balance) in enumerate(money_top, 1):
                    try:
                        user = await bot.fetch_user(int(user_id))
                        money_desc.append(f"{idx}. {user.display_name} ‚Äî {balance} –º–æ–Ω–µ—Ç")
                    except Exception:
                        money_desc.append(f"{idx}. [–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π] ‚Äî {balance} –º–æ–Ω–µ—Ç")
                
                embed.add_field(
                    name="üí∞ –ë–æ–≥–∞—Ç–µ–π—à–∏–µ –∏–≥—Ä–æ–∫–∏",
                    value="\n".join(money_desc),
                    inline=False
                )

            # Add level leaderboard if data exists
            if level_top:
                level_desc = []
                for idx, (user_id, level, exp) in enumerate(level_top, 1):
                    try:
                        user = await bot.fetch_user(int(user_id))
                        level_desc.append(f"{idx}. {user.display_name} ‚Äî –£—Ä. {level} (–û–ø—ã—Ç: {exp})")
                    except Exception:
                        level_desc.append(f"{idx}. [–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π] ‚Äî –£—Ä. {level} (–û–ø—ã—Ç: {exp})")
                
                embed.add_field(
                    name="üèÖ –°–∞–º—ã–µ –æ–ø—ã—Ç–Ω—ã–µ –∏–≥—Ä–æ–∫–∏",
                    value="\n".join(level_desc),
                    inline=False
                )

            embed.set_footer(text=f"–ü–æ–∫–∞–∑–∞–Ω–æ —Ç–æ–ø-{top_n} –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            await ctx.send(embed=embed)

        except sqlite3.Error as e:
            print(f"[–û–®–ò–ë–ö–ê –ë–î] –û—à–∏–±–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")
            await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã.")
        except Exception as e:
            print(f"[–û–®–ò–ë–ö–ê] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
    
    @bot.command(name="mystats")
    async def mystats(ctx, member: discord.Member = None):
        target = member or ctx.author
        user_id = str(target.id)
        
        # Initialize user if not exists
        if not db.get_user(user_id):
            db.create_user(user_id)
        
        # Get all statistics
        top_emojis = db.get_top_emojis(user_id)
        top_words = db.get_top_words(user_id)
        voice_seconds = db.get_voice_time(user_id)
        stats = db.get_user_stats(user_id)
        user = db.get_user(user_id)
        level_info = db.get_level(user_id)  # Get level info
        
        # Format voice time
        hours, remainder = divmod(voice_seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        voice_time_str = f"{int(hours)}—á {int(minutes)}–º {int(seconds)}—Å"
        
        # Create embed
        embed = discord.Embed(
            title=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {target.display_name}",
            color=0x00ffcc
        )
        
        # Basic info
        embed.add_field(name="üèÜ –£—Ä–æ–≤–µ–Ω—å", value=str(level_info["level"]), inline=True)
        embed.add_field(
            name="‚ú® –û–ø—ã—Ç", 
            value=f"{level_info['experience']}/{level_info['next_level_exp']}", 
            inline=True
        )
        embed.add_field(name="üí∞ –ë–∞–ª–∞–Ω—Å", value=f"{user['balance']} –º–æ–Ω–µ—Ç", inline=True)
        
        # Activity
        embed.add_field(name="üí¨ –°–æ–æ–±—â–µ–Ω–∏–π", value=str(stats["messages"]), inline=True)
        embed.add_field(name="üé§ –í—Ä–µ–º—è –≤ –≥–æ–ª–æ—Å–µ", value=voice_time_str, inline=True)
        
        # Top emojis
        if top_emojis:
            emoji_text = "\n".join([f"{emoji}: {count} —Ä–∞–∑" for emoji, count in top_emojis])
            embed.add_field(name="‚ù§Ô∏è –¢–æ–ø —ç–º–æ–¥–∑–∏", value=emoji_text, inline=False)
        else:
            embed.add_field(name="‚ù§Ô∏è –¢–æ–ø —ç–º–æ–¥–∑–∏", value="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", inline=False)
        
        # Top words (filter words used more than 3 times)
        if top_words:
            filtered_words = [(word, count) for word, count in top_words if count > 3]
            if filtered_words:
                words_text = "\n".join([f"'{word}': {count} —Ä–∞–∑" for word, count in filtered_words])
                embed.add_field(name="üìù –¢–æ–ø —Å–ª–æ–≤", value=words_text, inline=False)
            else:
                embed.add_field(name="üìù –¢–æ–ø —Å–ª–æ–≤", value="–ù–µ—Ç —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–∫–∞–∑–∞–Ω—ã –±–æ–ª–µ–µ 3 —Ä–∞–∑", inline=False)
        else:
            embed.add_field(name="üìù –¢–æ–ø —Å–ª–æ–≤", value="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", inline=False)
        
        embed.set_thumbnail(url=target.avatar.url)
        await ctx.send(embed=embed)

    @bot.command(name="roleshop")
    async def roleshop(ctx):
        class RoleShopView(View):
            def __init__(self):
                super().__init__(timeout=None)
                self.load_roles()
            
            def load_roles(self):
                try:
                    cursor = db.conn.cursor()
                    cursor.execute("SELECT role_name, price FROM role_shop")
                    self.roles = cursor.fetchall()
                except sqlite3.Error as e:
                    print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–æ–ª–µ–π: {e}")
                    self.roles = []
            
            async def create_button_callback(self, role_name: str, price: int):
                async def button_callback(interaction: discord.Interaction):
                    user_id = str(interaction.user.id)
                    guild = interaction.guild
                    role = discord.utils.get(guild.roles, name=role_name)
                    
                    if not role:
                        await interaction.response.send_message(
                            f"‚ùå –†–æ–ª—å `{role_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.",
                            ephemeral=True
                        )
                        return
                    
                    if role in interaction.user.roles:
                        await interaction.response.send_message(
                            f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å `{role_name}`.",
                            ephemeral=True
                        )
                        return
                    
                    user = db.get_user(user_id)
                    if not user:
                        db.create_user(user_id)
                        user = db.get_user(user_id)
                    
                    if user['balance'] < price:
                        await interaction.response.send_message(
                            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ `{role_name}`.",
                            ephemeral=True
                        )
                        return
                    
                    db.update_balance(user_id, -price)
                    try:
                        await interaction.user.add_roles(role)
                        await interaction.response.send_message(
                            f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ —Ä–æ–ª—å `{role_name}` –∑–∞ {price} –º–æ–Ω–µ—Ç!",
                            ephemeral=True
                        )
                    except discord.Forbidden:
                        await interaction.response.send_message(
                            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.",
                            ephemeral=True
                        )
                    except Exception as e:
                        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–æ–ª–∏: {e}")
                        await interaction.response.send_message(
                            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ä–æ–ª–∏.",
                            ephemeral=True
                        )
                return button_callback
        
        embed = discord.Embed(title="üéñÔ∏è –ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π", color=0x00ff00)
        view = RoleShopView()
        
        try:
            cursor = db.conn.cursor()
            cursor.execute("SELECT role_name, price FROM role_shop")
            roles = cursor.fetchall()
            
            if not roles:
                embed.description = "–í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–æ–ª–µ–π"
                await ctx.send(embed=embed)
                return
            
            for role_name, price in roles:
                embed.add_field(name=role_name, value=f"{price} –º–æ–Ω–µ—Ç", inline=False)
                button = Button(
                    label=f"–ö—É–ø–∏—Ç—å {role_name}", 
                    style=discord.ButtonStyle.primary,
                    custom_id=f"buy_{role_name}"
                )
                button.callback = await view.create_button_callback(role_name, price)
                view.add_item(button)
            
            await ctx.send(embed=embed, view=view)
        except sqlite3.Error as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ —Ä–æ–ª–µ–π: {e}")
            await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π.")
