import discord
from discord.ui import View, Button, Modal, TextInput
from database import BotDatabase
from utils import logger
from discord.ext import commands  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
import os  # Needed for clear_downloads
import shutil
import re

def is_admin():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def predicate(ctx):
        if not ctx.author.guild_permissions.administrator:
            await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return False
        return True
    return commands.check(predicate)

def setup(bot, db):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    bot.remove_command('help')
    
    @bot.command(name="bothelp")
    async def help_command(ctx):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏"""
        embed = discord.Embed(
            title="üìò –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º Fissure Bot",
            description="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ",
            color=0x1E90FF
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ—Ä—è–¥–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
        commands_info = [
            {
                "name": "fissdaily",
                "description": "–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –≤ –º–æ–Ω–µ—Ç–∞—Ö",
                "usage": "!fissdaily"
            },
            {
                "name": "balance",
                "description": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç",
                "usage": "!balance [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]"
            },
            {
                "name": "leaderboard",
                "description": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É",
                "usage": "!leaderboard"
            },
            {
                "name": "mystats",
                "description": "–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "usage": "!mystats [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]"
            },
            {
                "name": "roleshop",
                "description": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –∫—É–ø–∏—Ç—å —Ä–æ–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
                "usage": "!roleshop"
            }
        ]

        for cmd in commands_info:
            embed.add_field(
                name=f"üî∏ {cmd['name']}",
                value=f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {cmd['description']}\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `{cmd['usage']}`",
                inline=False
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è
        embed.add_field(
            name="üéØ –£—Ä–æ–≤–Ω–∏ –∏ –æ–ø—ã—Ç",
            value="–ó–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ–ø—ã—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–≤—ã—à–∞–µ—Ç –≤–∞—à —É—Ä–æ–≤–µ–Ω—å",
            inline=False
        )
        embed.add_field(
            name="üí¨ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            value="–ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –ª—é–±–∏–º—ã–µ —ç–º–æ–¥–∑–∏ –∏ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–ª–æ–≤–∞",
            inline=False
        )

        await ctx.send(embed=embed)


    
    @bot.command(name="adminpanel")
    @is_admin()
    async def admin_panel(ctx):
        # Create a view that will contain the buttons
        class AdminPanelView(View):
            def __init__(self):
                super().__init__(timeout=30)  # Set a timeout for the view to expire after 30 seconds
                self.invoker = ctx.author  # Store the invoker (the person who called the command)
                
                # Add buttons directly in __init__
                self.add_item(self.AddRoleButton())
                self.add_item(self.RemoveRoleButton())
                self.add_item(self.SetPriceButton())
                self.add_item(self.GiveCoinsButton())

            # Override the interaction_check method to allow only the invoker to interact with buttons
            async def interaction_check(self, interaction: discord.Interaction):
                # Check if the user interacting with the button is the one who invoked the command
                if interaction.user != self.invoker:
                    await interaction.response.send_message(
                        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.",
                        ephemeral=True
                    )
                    return False
                return True
            
            class GiveCoinsButton(Button):
                def __init__(self):
                    super().__init__(
                        label="–í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã",
                        style=discord.ButtonStyle.primary
                    )
                
                async def callback(self, interaction: discord.Interaction):
                    class GiveCoinsModal(Modal, title="–í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"):
                        member = TextInput(label="–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID –∏–ª–∏ @)", placeholder="–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                        amount = TextInput(label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç", placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç")
                        
                        async def on_submit(self, interaction: discord.Interaction):
                            member_id_input = self.member.value
                            amount_to_give = int(self.amount.value)
                            
                            # Check if the input is a user mention (e.g., @user, @!user, <@user_id>, <@!user_id>)
                            match = re.match(r"<@!?(\d+)>", member_id_input)  # Check for <@user_id> or <@!user_id>
                            
                            if match:
                                # Extract the user ID from the mention string
                                member_id = match.group(1)
                            elif member_id_input.startswith("@"):
                                # Handle plain @username or @!username mentions
                                member_name = member_id_input.lstrip("@")  # Remove @
                                member = discord.utils.get(interaction.guild.members, name=member_name)
                                if member:
                                    member_id = str(member.id)
                                else:
                                    await interaction.response.send_message(
                                        "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                        ephemeral=True
                                    )
                                    return
                            elif member_id_input.isdigit():
                                # If it's a number, it's directly the user ID
                                member_id = member_id_input
                            else:
                                await interaction.response.send_message(
                                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                                    ephemeral=True
                                )
                                return
                            
                            # Fetch the member using the user ID
                            member = await interaction.guild.fetch_member(int(member_id))
                            
                            # Update the balance (ensure this is implemented in your db.update_balance method)
                            db.update_balance(str(member.id), amount_to_give)
                            
                            await interaction.response.send_message(
                                f"‚úÖ –í—ã–¥–∞–Ω–æ {amount_to_give} fissure coins –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.display_name}",
                                ephemeral=True
                            )
                            logger.info(f"Given {amount_to_give} coins to {member.display_name}")
                    
                    await interaction.response.send_modal(GiveCoinsModal())

            class AddRoleButton(Button):
                def __init__(self):
                    super().__init__(
                        label="–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å",
                        style=discord.ButtonStyle.primary
                    )
                
                async def callback(self, interaction: discord.Interaction):
                    class AddRoleModal(Modal, title="–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å –≤ –º–∞–≥–∞–∑–∏–Ω"):
                        role_name = TextInput(label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏")
                        role_price = TextInput(label="–¶–µ–Ω–∞", placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ fissure coins")
                        
                        async def on_submit(self, interaction: discord.Interaction):
                            cursor = db.conn.cursor()
                            cursor.execute("INSERT OR IGNORE INTO role_shop (role_name, price) VALUES (?, ?)", 
                                        (self.role_name.value, int(self.role_price.value)))
                            db.conn.commit()
                            await interaction.response.send_message(
                                f"‚úÖ –†–æ–ª—å `{self.role_name.value}` –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞ {self.role_price.value} fissure coins", 
                                ephemeral=True
                            )
                            logger.info("Added new role " + self.role_name.value)
                    
                    await interaction.response.send_modal(AddRoleModal())
            
            class RemoveRoleButton(Button):
                def __init__(self):
                    super().__init__(
                        label="–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å",
                        style=discord.ButtonStyle.danger
                    )
                
                async def callback(self, interaction: discord.Interaction):
                    class RemoveRoleSelect(discord.ui.Select):
                        def __init__(self):
                            cursor = db.conn.cursor()
                            cursor.execute("SELECT role_name FROM role_shop")
                            roles = cursor.fetchall()
                            options = [discord.SelectOption(label=role[0]) for role in roles]
                            super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", options=options)
                        
                        async def callback(self, interaction: discord.Interaction):
                            role_name = self.values[0]
                            cursor = db.conn.cursor()
                            cursor.execute("DELETE FROM role_shop WHERE role_name=?", (role_name,))
                            db.conn.commit()
                            await interaction.response.send_message(
                                f"‚úÖ –†–æ–ª—å `{role_name}` —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞", 
                                ephemeral=True
                            )
                    
                    view = View()
                    view.add_item(RemoveRoleSelect())
                    await interaction.response.send_message(
                        "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", 
                        view=view, 
                        ephemeral=True
                    )
            
            class SetPriceButton(Button):
                def __init__(self):
                    super().__init__(
                        label="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É",
                        style=discord.ButtonStyle.secondary
                    )
                
                async def callback(self, interaction: discord.Interaction):
                    class SetPriceModal(Modal, title="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —Ä–æ–ª–∏"):
                        role_name = TextInput(label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏")
                        new_price = TextInput(label="–ù–æ–≤–∞—è —Ü–µ–Ω–∞")
                        
                        async def on_submit(self, interaction: discord.Interaction):
                            cursor = db.conn.cursor()
                            cursor.execute("UPDATE role_shop SET price=? WHERE role_name=?", 
                                        (int(self.new_price.value), self.role_name.value))
                            db.conn.commit()
                            await interaction.response.send_message(
                                f"‚úÖ –¶–µ–Ω–∞ —Ä–æ–ª–∏ `{self.role_name.value}` –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {self.new_price.value} fissure coins", 
                                ephemeral=True
                            )
                    
                    await interaction.response.send_modal(SetPriceModal())
                    
        # Send the embed privately to the invoking user (in their DM)
        embed = discord.Embed(
            title="üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", 
            description="–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", 
            color=0x00ffcc
        )
        embed.add_field(
            name="üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", 
            value="""–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
            –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
            –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω
            –í—ã–¥–∞—á–∞ –º–æ–Ω–µ—Ç
            –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö !resetuser @user""", 
            inline=False
        )

        try:
            # Attempt to send the message in the user's DM
            await ctx.author.send(embed=embed, view=AdminPanelView())
            await ctx.send("‚úÖ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª.", ephemeral=True)
        except discord.Forbidden:
            await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª.", ephemeral=True)




    @bot.command(name="addrole")
    @is_admin()
    async def add_role(ctx, role_name: str, price: int):
        cursor = db.conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO role_shop (role_name, price) VALUES (?, ?)", (role_name, price))
        db.conn.commit()
        await ctx.send(f"‚úÖ –†–æ–ª—å `{role_name}` –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞ {price} fissure coins")

    @bot.command(name="removerole")
    @is_admin()
    async def remove_role(ctx, role_name: str):
        cursor = db.conn.cursor()
        cursor.execute("DELETE FROM role_shop WHERE role_name=?", (role_name,))
        db.conn.commit()
        await ctx.send(f"‚úÖ –†–æ–ª—å `{role_name}` —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞")

    @bot.command(name="setprice")
    @is_admin()
    async def set_price(ctx, role_name: str, price: int):
        cursor = db.conn.cursor()
        cursor.execute("UPDATE role_shop SET price=? WHERE role_name=?", (price, role_name))
        db.conn.commit()
        await ctx.send(f"‚úÖ –¶–µ–Ω–∞ —Ä–æ–ª–∏ `{role_name}` –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {price} fissure coins")

    @bot.command(name="givecoins")
    @is_admin()
    async def give_coins(ctx, member: discord.Member, amount: int):
        user_id = str(member.id)
        db.update_balance(user_id, amount)
        await ctx.send(f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} fissure coins –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.display_name}")

    @bot.command(name="resetuser")
    @is_admin()
    async def reset_user(ctx, member: discord.Member):
        user_id = str(member.id)
        cursor = db.conn.cursor()
        cursor.execute("DELETE FROM users WHERE user_id=?", (user_id,))
        cursor.execute("DELETE FROM user_stats WHERE user_id=?", (user_id,))
        db.conn.commit()
        await ctx.send(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.display_name} —Å–±—Ä–æ—à–µ–Ω—ã")


    @bot.command(name="shutdown")
    @is_admin()
    async def shutdown(ctx):
        await ctx.send("üõë –í—ã–∫–ª—é—á–∞—é –±–æ—Ç–∞...")
        await bot.close()

    @bot.command(name="clear_downloads")
    @is_admin()
    async def clear_downloads(ctx):
        try:
            import shutil
            if os.path.exists('downloads'):
                shutil.rmtree('downloads')
            os.makedirs('downloads', exist_ok=True)
            await ctx.send("üóëÔ∏è –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ –æ—á–∏—â–µ–Ω–∞!")
        except Exception as e:
            await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}")